// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum OnRampStatus {
  Success
  Failure
  Processing
}

enum Provider {
  local 
  google
  github
}


model User {
  id                String              @id @default(uuid())
  email             String?             @unique
  name              String?
  mobile            String?             @unique
  isMobileVerified Boolean @default(false)
  hashedPassword    String?
  provider          Provider?
  providerAccountId String?            

  OnRampTransaction OnRampTransaction[]
  Balance Balance[]
  sentTranactions p2ptransactions[] @relation(name: "sentTranactions")

  toTranactions p2ptransactions[] @relation(name: "toTranactions")
}

model p2ptransactions {
  id Int @id @default(autoincrement())
  senderId   String
  receiverId String
  recMobile String?
  sendMobile String?
  tTime DateTime? @default(now())
  amount Int 
  from User @relation(name : "sentTranactions" ,fields: [senderId] , references: [id]) 
  to User @relation(name : "toTranactions" ,fields: [receiverId] , references: [id])
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId String  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}